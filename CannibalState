package VampireLife;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class CannibalState {
	//is legal
	//next state
	//is Solved
	//to String
	//solve it all
	private final int boatstor=2;
	private Boolean boat;
	private int misright, misleft, canright, canleft;
	
	public CannibalState(int mr, int ml, int cr, int cl, Boolean boat) {
		misright=mr;
		misleft=ml;
		canright=cr;
		canleft=cl;
		this.boat=boat;
		
		
	}
	
	public ArrayList<CannibalState> solve(int Depth, HashSet<CannibalState>previous, ArrayList<CannibalState>soln) {
		
		if(misleft==0 && canleft==0) {
			soln.add(this);
			return soln;
		}
			
		if(Depth>=10000) {
			return null;
		}
		
		
		for(CannibalState z : nextStates()) {
			
			if(previous.contains(z)) {
				
				continue;
			}else {
				
				previous.add(z);
			}
			
			ArrayList<CannibalState>x = z.solve(Depth +1, previous, soln);
			
			if(x!=null) {
				soln.add(this);
				return soln;
			}
		}
			
			
			
			
			
			return null;
		}
		
		
	
		
		
	
	
	public int hashCode() {
		
		int val = 1000000000;
		val+= (boat ? 100000000 :0);
		val+= canright*1000000;
		val+= canleft*10000;
		val+= misleft*100;
		val +=misright;
		
		return val;
		
	}
	
	
	
	public boolean equals(Object c) {
		
		CannibalState object = (CannibalState)c;
		
		if(object.canleft == canleft && object.canright == canright && object.misleft == misleft && object.misright == misright) {
			return true;
		}else {
			return false;
		}
		
		
	} 
	
	public String toString() {
		return canleft +", " + misleft + "||" + canright +", " + misright;
				
	}
	
	public Boolean isLegal() {
		
		if(!(canleft >=0 && canright>=0 && misleft >=0 && misright >=0)) {
			
			return false;
		}
		
		if(canright> misright && misright> 0) {
			
			return false;
		}
		
		if(canleft > misleft && misleft > 0) {
			
			return false;
		}
		
		
		
		return true;
		
	}
		public HashSet<CannibalState> nextStates() {
		
		
		HashSet<CannibalState> nexts = new HashSet<CannibalState>();
		
		for (int i = 0; i <= boatstor; i++) {
			for(int j= 1; j <= boatstor-i; j++) {
					CannibalState next;
					
					if (boat) {
						
						next = new CannibalState(misright+i, misleft-i, canright+j, canleft-j, false);
				
					}else {
					
						next = new CannibalState(misright-i, misleft+i, canright-j, canleft+j, true);
					
					}
					
					if (next.isLegal()) {
						
						
						nexts.add(next);
					}
					
					
				}
			}
		
		return nexts;	
		
		}
		
		
		
		
	
	
	
	
	public static void main(String[] args) {
		CannibalState runner = new CannibalState(0,3,0,3, true);
//		System.out.println(runner.equals(new CannibalState(0,3,0,3,true)));
		
		HashSet<CannibalState> previous = new HashSet<>();
		previous.add(runner);
		ArrayList<CannibalState> solution = new ArrayList<>();
		System.out.println(runner.solve(1,previous, solution ));
		
	}
	
	
	
}


