package Nodes;

public class LinkedList<E> {
	
	private class Node{
		//private class hides from user instead of making another class
		Node next; 
		E data;
		
		public Node(E data) {
			this.data =data;
		}
		
		
	}
	
	private Node first;
	
	public void add(E info, int i) {
		
		//edge cases
		Node newNode = new Node(info);
		//if its empty
		if(first == null) {
			first = new Node(info);
			return;
		}
		
		//if i is 0 
		if(i == 0) {
			
			newNode.next = first;
			first = newNode;
		}
		
		
		try {
			Node curr = first;
			for(int j=0; j <i; j++) {
				curr = curr.next;
			}
			
			newNode.next = curr.next;
			curr.next = newNode.next;
			
		}
		catch(NullPointerException e) {
			
			throw new IndexOutOfBoundsException();
			
		}
		
		
		
		
	}
	public void add(E info) {
		
		
		if(first == null) {
			first = new Node(info);
			return;
		}
		Node curr=first;
		while(curr.next!=null) {
			
			curr= curr.next;
				
			
			
		}
		curr.next= new Node(info);
		
	}
	
	public int getSize() {
		int count=0;
		Node curr=first;
		if( first == null) {
			return 0;
		}
		while(curr.next!=null) {
			
			curr= curr.next;
			count++;	
			
			
		}
		return count+1;
		
	}
	
	public E getNode(int i) {
		
		try {
			Node curr=first;
			for(int j=0; j<i; j++) {
				curr = curr.next;
			}
			return curr.data;
			
		}
		catch(NullPointerException e) {
			
			throw new IndexOutOfBoundsException();
			
		}
		
		
		
		
	}
	
	public E remove(int i ) {
		
		
		try {
			Node curr = first;
			for(int j=0; j <i-1; j++) {
				curr = curr.next;
			}
			E temp = curr.next.data;
			curr.next = curr.next.next;
		
			return temp;
		}
		catch(NullPointerException e) {
			
			throw new IndexOutOfBoundsException();
			
		}
		
		
	}
	
	
	public static void main(String[] args) {
		
		LinkedList<String>myList = new LinkedList<String>();
		
		//myList.add("hi");
		//myList.add("bye");
		//myList.add("asd", 0);
		//myList.remove(1);
		
		System.out.println(myList.getSize());
		
	}
	
	
	
	
		
	}
