package Projects;


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import Projects.Branch;


public class Compressor {

	HashMap <Character, Integer> map = new HashMap();
	HashMap <Character, String> mapTREE = new HashMap();
	PQ<Branch<Character>> p = new PQ<Branch<Character>>();
	
	public Compressor() throws IOException {
		readfile();
		pq();
		traverse();
		System.out.println(mapTREE);
	}
	
	
	
	public void readfile() throws IOException {

		
		FileReader in = new FileReader("EnglishToArabicDictionary.txt");
		
		//Reads through the file and stops at -1 
		for(int line = in.read(); line !=-1; line = in.read()) {
		
			//checks if the char is already in the map, if it isn't add it with a freq of one
			//if it is then just add one to the total
			
			char letter = (char)line;
			
			if(map.get((char)line) ==null) {
				map.put((char)line, 1);
			}else {
				map.put((char)line, map.get(letter)+1);
			}
			
			
			
		}
		
		System.out.println(map);
		//read file 
		//store in map char --> int
		
	}
	
	public void pq() {
		
		
		for (Character key : map.keySet()) {
			p.add(new Branch<Character>(key), map.get(key));
		}
		
		
		while(p.size()>1) {
			int a = p.getFirstPrior();
			Branch<Character> a1=p.pop();
			
			int b = p.getFirstPrior();
			Branch<Character> b1=p.pop();
			
			p.add(new Branch<Character>(a1, b1), a+b);
		}
		
			
			
		
		
		
	
		
		
	}
	public void traverse() {
		genCode("", p.pop());
		
	}
	public void genCode(String code, Branch<Character> curr) {
		
		
		if(curr.isLeaf) {
			mapTREE.put(curr.getData(), code);
		}else {
			genCode(code + "0" , curr.left);
			genCode(code + "1" , curr.right);
		}
		
		
		
		
		
		
		
		
		
	}
	
	
	
	public static void main(String[]args) throws IOException {
		//Create a Pritority Queue when added sorted by freq
		
		//Methods: add, pop, to string
		
		
		//create binary tree to determine the codes for the characters
		
		
		new Compressor();
		
	}
	
	
}
