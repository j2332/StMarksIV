package DijkstraThing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;







public class CGPS {
	
	
	
	private JFrame mainwindow = new JFrame();
	private final int Width=900, Height=800;
	private BufferedImage bowlingball;
	
	
	private JFrame window = new JFrame();
	Graph2 graph = new Graph2();
	
	
	
	
	
	
	private JFrame window2 = new JFrame();
	Graph2 graph2 = new Graph2();
	
	private JFrame window3 = new JFrame();
	Graph2 graph3 = new Graph2();
	
	
	
	private File blah = new File("gps.txt");
	
	
	private int count=0;
	private Boolean where=false;
//	private Graph2 graph;
	
	
	
	public CGPS() {}
	public CGPS(Boolean x){
		

		//for testing
		
		
		
		//--------------------
		
		
		try {
			graph = new Graph2(blah);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		//just reads my image and creates it into a buffered image 
		try {
			bowlingball = ImageIO.read(new File("stopandshop.png"));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		//sets up the frame 
		window.setSize(Width, Height);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setLocationRelativeTo(null);
		
		
		
		//my main canvas with all the graphics
		JPanel canvas = new JPanel() {
			public void paint(Graphics g) {
				super.paint(g);
				
				g.drawImage(bowlingball, 0, 0, Width, Height, null); //background image 
				
				graph.paintIT(g); //uses the graph paint function 
				
			}
		};
		
		
		canvas.addMouseListener(new MouseListener() {
			
			
			String start=null;
			String end=null;
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				ArrayList<String>all = new ArrayList<>(); //arraylist that holds the vertices that are in the path
				
				for(String s : graph.keySet()) { //runs through all the vertices
					int x=e.getX();
					int y=e.getY();
					
					
					//checks if the mouse is on the vertex
					if(x>=graph.getVertex(s).x && x<=graph.getVertex(s).x+15 && y>=graph.getVertex(s).y && y<=graph.getVertex(s).y+15) {
						
						//if it is and no point has been selected then make the current vertex the start
						if(start==null) {
							start=graph.getVertex(s).info;
						}else if(end==null) {
							//if only one point is selected then make the end point the second
							end=graph.getVertex(s).info;
							
							//runs the dijkstra and makes the list all the vertices 
							all= graph.Dijkstra(start, end);
							
							//selects all the vertices in the path as true
							for(String w : all) {
								graph.getVertex(w).selectTru();
								
							}
							
							//just a frame that pops up to tell you the path
							JFrame frame = new JFrame(); 
							frame.setSize(300, 300);
							frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
							frame.setLocationRelativeTo(null);
							
							String s2="";
							
							for(String z : all) {
								s2+= z +" to ";
							}
							s2=s2.substring(0, s2.length()-4);
							
							final String s3 =s2;
							JPanel canvas2 = new JPanel() {
								public void paint(Graphics g) {
									super.paint(g);
									
									g.setColor(Color.BLACK);
									g.drawString("The path is:" + s3, 20, 20);
									
								}

							};
							frame.add(canvas2);
							frame.setVisible(true);
							
							
							
							
							//finds all the edges between vertices and selects them as true 
							for(int i=0; i<all.size()-1;i++) {
								graph.getEdge(graph.getVertex(all.get(i)), graph.getVertex(all.get(i+1))).selectTru();
							}
							
							

							
							
							
						}else {
							
							all= graph.Dijkstra(start, end);
							//sets all the edges in the path as false
							for(int i=0; i<all.size()-1;i++) {
								graph.getEdge(graph.getVertex(all.get(i)), graph.getVertex(all.get(i+1))).selectFal();
							}
							//sets the selected as the new start while reseting it all
							start=graph.getVertex(s).info;
							end=null;
							
							//selects all the vertices as false
							for(String z : graph.keySet()) {
								graph.getVertex(z).selectFal();
							}
							
							
						}
						//selects the one as true
						graph.getVertex((s)).selectTru();
						
						
						
						//repaints to refresh
						window.getContentPane().repaint();
					}
					
					

				}
				
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			
		});
		
		window.add(canvas);
		window.setVisible(true);

		
		
	}
	
	//map maker
	public CGPS(int x){
		
		//this first portion is identical to the part above
		try {
			bowlingball = ImageIO.read(new File("stopandshop.png"));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		window.setSize(Width, Height);

		
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setLocationRelativeTo(null);
		
		
		JPanel container = new JPanel();
		
		
		JPanel canvas = new JPanel() {
			public void paint(Graphics g) {
				super.paint(g);

				g.drawImage(bowlingball, 0, 0, Width, Height, null);
				
				
				graph2.paintIT(g);
				
				
				
				
			}
		};
		
		//-------------
		
		canvas.addMouseListener(new MouseListener() {
			String a=null;
			String b=null;
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
			}
				
			@Override
			public void mousePressed(MouseEvent e) {
				
				Boolean repeat=false;
				//first checks if a vertex has already been made at that point
				for(String s : graph2.keySet()) {
					if(graph2.getVertex(s).isOn(e.getX(), e.getY())) {
						
						repeat=true;
						
					}
					
				}
				
				
				//if it hasn't then ask for the name and make a new vertex
				if(!repeat) {
					
					String path = JOptionPane.showInputDialog("Name this aisle!");
					
					graph2.addVertex(path, e.getX(), e.getY());
					
					
				}else {

					//if not the first click remebers the first vertex selected
					count++;
					if(count==1) {
						for(String c : graph2.keySet()) {
							if(graph2.getVertex(c).isOn(e.getX(), e.getY())){
								
								a=c;
								
								
								
							}
						}
					}
					
					//then the second clicks remebers the second vertex
					if(count==2) {
						for(String d : graph2.keySet()) {
							if(graph2.getVertex(d).isOn(e.getX(), e.getY())){
								b=d;
								
							}
						}
						
						
						//then just connect the vertices and calculate distance using distance formula 
						graph2.connect(a, b,(int) Math.sqrt( (Math.pow(graph2.getVertex(a).x-graph2.getVertex(b).x,2 ))+(Math.pow(graph2.getVertex(a).y-graph2.getVertex(b).y, 2)) ) );
						count=0;
						a="";
						b="";
					
				}
					
				
			}

				
				
				
				try {
					graph2.save("gps");
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				window.getContentPane().repaint();
				
				
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
//				resize=false;
//				window.getContentPane().repaint();
				
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		});
		
		
		
		
		
		
		window.add(canvas);
		window.setVisible(true);
		
	}
	
	//exact same as map maker, but graph already has values in it 
	public CGPS(double x){

		try {
			graph2 = new Graph2(blah);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			bowlingball = ImageIO.read(new File("stopandshop.png"));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		window.setSize(Width, Height);

		
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setLocationRelativeTo(null);
		
		
		JPanel container = new JPanel();
		
		
		JPanel canvas = new JPanel() {
			public void paint(Graphics g) {
				super.paint(g);

				g.drawImage(bowlingball, 0, 0, Width, Height, null);
				
				
				graph2.paintIT(g);
				
				
				
				
			}
		};
		
		
		
		canvas.addMouseListener(new MouseListener() {
			String a=null;
			String b=null;
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
			}
				
			@Override
			public void mousePressed(MouseEvent e) {
				
				Boolean repeat=false;
				
				for(String s : graph2.keySet()) {
					if(graph2.getVertex(s).isOn(e.getX(), e.getY())) {
						
						repeat=true;
						
					}
					
				}
				
				
				
				if(!repeat) {
					
					String path = JOptionPane.showInputDialog("Name this aisle!");
					
					graph2.addVertex(path, e.getX(), e.getY());
					
					
				}else {

					
					count++;
					if(count==1) {
						for(String c : graph2.keySet()) {
							if(graph2.getVertex(c).isOn(e.getX(), e.getY())){
								
								a=c;
								
								
								
							}
						}
					}
					
					
					if(count==2) {
						for(String d : graph2.keySet()) {
							if(graph2.getVertex(d).isOn(e.getX(), e.getY())){
								b=d;
								
							}
						}
						
						
						
						graph2.connect(a, b,(int) Math.sqrt( (Math.pow(graph2.getVertex(a).x-graph2.getVertex(b).x,2 ))+(Math.pow(graph2.getVertex(a).y-graph2.getVertex(b).y, 2)) ) );
						count=0;
						a="";
						b="";
					
				}
					
				
			}

				
				
				
				try {
					graph2.save("gps");
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				window.getContentPane().repaint();
				
				
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
//				resize=false;
//				window.getContentPane().repaint();
				
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		});
		
		
		
		
		
		
		window.add(canvas);
		window.setVisible(true);
		
	}
	public void setUp() {
		
		//creates a small frame 
		mainwindow.setSize(300, 300);
		mainwindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mainwindow.setLocationRelativeTo(null);
		
		
		//three different buttons for three different functions

		JPanel canvas2 = new JPanel() {};
		
		//first creates a brand new map/file
		JButton mapmaker = new JButton("Make new map");
		mapmaker.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//Just a button when Pressed sets itself to true and every other button to false
				new CGPS(1);
				mainwindow.setVisible(false);
				
			}
		});
		//second uses that map/file to find fastest routes
		JButton distant = new JButton("GPS");
		distant.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//Just a button when Pressed sets itself to true and every other button to false
				new CGPS(false);
				mainwindow.setVisible(false);
				
			}
		});
		//last one edits the already exsisting map/file
		JButton edit = new JButton("Edit map");
		edit.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				//Just a button when Pressed sets itself to true and every other button to false
				new CGPS(2.412);
				mainwindow.setVisible(false);
				
			}
		});
		
		//I made three different constructors for this and one constructor with nothing in it so start it off
		canvas2.add(mapmaker);
		
		canvas2.add(distant);
		canvas2.add(edit);
		mainwindow.add(canvas2);
		mainwindow.setVisible(true);
		
	}
	
	
	public static void main(String[]args) {
		CGPS run = new CGPS();
		run.setUp();
	}
	
}
